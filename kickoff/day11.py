# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JFc0cDFC7P25NV_cj0ci86iw2NQYSFz5
"""

#2D Array DS - HackerRank

# Complete the hourglassSum function below.
def hourglassSum(matrix, row, col):
    sum = 0
    sum += matrix[row-1][col-1]
    sum += matrix[row-1][col]
    sum += matrix[row-1][col+1]
    sum += matrix[row][col]
    sum += matrix[row+1][col-1]
    sum += matrix[row+1][col]
    sum += matrix[row+1][col+1]
    return sum

arr = []
for arr_i in range(6):
    arr_t = [int(arr_temp) for arr_temp in input().strip().split(' ')]
    arr.append(arr_t)

max_hourglass_sum = -63
for i in range(1,5):
    for j in range(1,5):
        current_hoursglass_sum = hourglassSum(arr,i,j)
        if current_hoursglass_sum > max_hourglass_sum:
            max_hourglass_sum = current_hoursglass_sum


print(max_hourglass_sum)

# Arrays: Left Rotation - HackerRank

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the rotLeft function below.
#def rotLeft(a, d):

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    nd = input().split()

    n = int(nd[0])

    d = int(nd[1])

    a = list(map(int, input().rstrip().split()))

    
    a = a[(n+d)%n:] + a[0:(n+d)%n]
    result = a

    print(result)

    #result = rotLeft(a, d)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()

# Count Negative Numbers in a Sorted Matrix

class Solution:
    def countNegatives(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
              
        neg = []
        for i in range(m):
            for j in range(n):
                print(n)
                if grid[i][j] <0:
                    neg.append(grid[i][j])
        return(len(neg))

# creating a class "Robot"
class Robot:
  #create a custom constructor
  #special kind of method that instantiates an object 
  def __init__(self, name, color, weight): #self needs to be the first argument
  # the parameters should be named the same as the arguments
    self.name = name
    self.color = color
    self.weight = weight

  #create a method
  #a method is is bound to the class
  def introduce_self(self):
    print("My name is " + self.name)

# First object "Robot"
r1 = Robot("Tom", "red", 30)

#Second object "Robot"
r2 = Robot("Jerry", "black", 40)

r1.introduce_self()
r2.introduce_self()